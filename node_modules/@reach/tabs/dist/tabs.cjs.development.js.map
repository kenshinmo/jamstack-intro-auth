{"version":3,"file":"tabs.cjs.development.js","sources":["../src/index.tsx"],"sourcesContent":["/**\n * Welcome to @reach/tabs!\n *\n * An accessible tabs component.\n *\n * The `Tab` and `TabPanel` elements are associated by their order in the tree.\n * None of the components are empty wrappers, each is associated with a real DOM\n * element in the document, giving you maximum control over styling and composition.\n *\n * You can render any other elements you want inside of `Tabs`, but `TabList`\n * should only render `Tab` elements, and `TabPanels` should only render\n * `TabPanel` elements.\n *\n * TODO: Consider manual tab activation\n * https://www.w3.org/TR/wai-aria-practices-1.2/examples/tabs/tabs-2/tabs.html\n *\n *\n * TODO: Consider `orientation` prop to account for keyboard behavior\n *       - horizontal-top\n *       - horizontal-bottm\n *       - vertical-left\n *       - vertical-right\n *\n * @see Docs     https://reacttraining.com/reach-ui/tabs\n * @see Source   https://github.com/reach/reach-ui/tree/master/packages/tabs\n * @see WAI-ARIA https://www.w3.org/TR/wai-aria-practices-1.2/#tabpanel\n */\n\nimport React, {\n  useContext,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n  Children,\n} from \"react\";\nimport PropTypes from \"prop-types\";\nimport warning from \"warning\";\nimport {\n  createDescendantContext,\n  DescendantProvider,\n  useDescendant,\n  useDescendantKeyDown,\n  useDescendants,\n} from \"@reach/descendants\";\nimport {\n  boolOrBoolString,\n  checkStyles,\n  cloneValidElement,\n  createNamedContext,\n  forwardRefWithAs,\n  getElementComputedStyle,\n  isNumber,\n  makeId,\n  noop,\n  useForkedRef,\n  useIsomorphicLayoutEffect,\n  useUpdateEffect,\n  wrapEvent,\n} from \"@reach/utils\";\nimport { useId } from \"@reach/auto-id\";\n\ninterface ITabsContext {\n  id: string;\n  isControlled: boolean;\n  onFocusPanel: () => void;\n  onSelectTab: (index: number) => void;\n  selectedIndex: number;\n  selectedPanelRef: React.MutableRefObject<HTMLElement | null>;\n  setSelectedIndex: React.Dispatch<React.SetStateAction<number>>;\n  userInteractedRef: React.MutableRefObject<boolean>;\n}\n\nconst TabsDescendantsContext = createDescendantContext<\n  HTMLElement,\n  TabDescendantProps\n>(\"TabsDescendantsContext\");\n\nconst TabPanelDescendantsContext = createDescendantContext<HTMLElement>(\n  \"TabPanelDescendantsContext\"\n);\nconst TabsContext = createNamedContext(\"TabsContext\", {} as ITabsContext);\nconst useTabsContext = () => useContext(TabsContext);\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Tabs\n *\n * The parent component of the tab interface.\n *\n * @see Docs https://reacttraining.com/reach-ui/tabs#tabs\n */\nexport const Tabs = forwardRefWithAs<TabsProps, \"div\">(function Tabs(\n  {\n    as: Comp = \"div\",\n    children,\n    defaultIndex,\n    index: controlledIndex = undefined,\n    onChange,\n    readOnly = false,\n    ...props\n  },\n  ref\n) {\n  let isControlled = useRef(controlledIndex != null);\n  useEffect(() => {\n    if (__DEV__) {\n      warning(\n        !(isControlled.current && controlledIndex == null),\n        \"Tabs is changing from controlled to uncontrolled. Tabs should not switch from controlled to uncontrolled (or vice versa). Decide between using a controlled or uncontrolled Tabs for the lifetime of the component. Check the `index` prop being passed in.\"\n      );\n      warning(\n        !(!isControlled.current && controlledIndex != null),\n        \"Tabs is changing from uncontrolled to controlled. Tabs should not switch from uncontrolled to controlled (or vice versa). Decide between using a controlled or uncontrolled Tabs for the lifetime of the component. Check the `index` prop being passed in.\"\n      );\n    }\n  }, [controlledIndex]);\n\n  let _id = useId(props.id);\n  let id = props.id ?? makeId(\"tabs\", _id);\n\n  /*\n   * We only manage focus if the user caused the update vs. a new controlled\n   * index coming in.\n   */\n  let userInteractedRef = useRef(false);\n\n  let selectedPanelRef = useRef<HTMLElement | null>(null);\n  let [selectedIndex, setSelectedIndex] = useState(defaultIndex || 0);\n  let [tabs, setTabs] = useDescendants<HTMLElement, TabDescendantProps>();\n\n  const context: ITabsContext = useMemo(() => {\n    return {\n      isControlled: isControlled.current,\n      selectedIndex: isControlled.current\n        ? (controlledIndex as number)\n        : selectedIndex,\n      id,\n      userInteractedRef,\n      selectedPanelRef,\n      setSelectedIndex: isControlled.current ? noop : setSelectedIndex,\n      onFocusPanel: () => {\n        selectedPanelRef.current?.focus();\n      },\n      onSelectTab: readOnly\n        ? noop\n        : (index: number) => {\n            userInteractedRef.current = true;\n            onChange && onChange(index);\n            if (!isControlled.current) {\n              setSelectedIndex(index);\n            }\n          },\n    };\n  }, [controlledIndex, id, onChange, readOnly, selectedIndex]);\n\n  useEffect(() => checkStyles(\"tabs\"), []);\n\n  return (\n    <DescendantProvider\n      context={TabsDescendantsContext}\n      items={tabs}\n      set={setTabs}\n    >\n      <TabsContext.Provider value={context}>\n        <Comp {...props} ref={ref} data-reach-tabs=\"\" id={props.id}>\n          {children}\n        </Comp>\n      </TabsContext.Provider>\n    </DescendantProvider>\n  );\n});\n\n/**\n * @see Docs https://reacttraining.com/reach-ui/tabs#tabs-props\n */\nexport type TabsProps = {\n  /**\n   * Tabs expects `<TabList>` and `<TabPanels>` as children. The order doesn't\n   * matter, you can have tabs on the top or the bottom. In fact, you could have\n   * tabs on both the bottom and the top at the same time. You can have random\n   * elements inside as well.\n   *\n   * @see Docs https://reacttraining.com/reach-ui/tabs#tabs-props\n   */\n  children: React.ReactNode;\n  /**\n   * Like form inputs, a tab's state can be controlled by the owner. Make sure\n   * to include an `onChange` as well, or else the tabs will not be interactive.\n   *\n   * @see Docs https://reacttraining.com/reach-ui/tabs#tabs-props\n   */\n  index?: number;\n  /**\n   * @see Docs https://reacttraining.com/reach-ui/tabs#tabs-props\n   */\n  readOnly?: boolean;\n  /**\n   * Starts the tabs at a specific index.\n   *\n   * @see Docs https://reacttraining.com/reach-ui/tabs#tabs-props\n   */\n  defaultIndex?: number;\n  /**\n   * Calls back with the tab index whenever the user changes tabs, allowing your\n   * app to synchronize with it.\n   *\n   * @see Docs https://reacttraining.com/reach-ui/tabs#tabs-props\n   */\n  onChange?: (index: number) => void;\n};\n\nif (__DEV__) {\n  Tabs.displayName = \"Tabs\";\n  Tabs.propTypes = {\n    children: PropTypes.node.isRequired,\n    onChange: PropTypes.func,\n    index: (props, name, compName, location, propName) => {\n      let val = props[name];\n      if (\n        props.index > -1 &&\n        props.onChange == null &&\n        props.readOnly !== true\n      ) {\n        return new Error(\n          \"You provided a value prop to `\" +\n            compName +\n            \"` without an `onChange` handler. This will render a read-only tabs element. If the tabs should be mutable use `defaultIndex`. Otherwise, set `onChange`.\"\n        );\n      } else if (props[name] != null && !isNumber(props[name])) {\n        return new Error(\n          `Invalid prop \\`${propName}\\` supplied to \\`${compName}\\`. Expected \\`number\\`, received \\`${\n            Array.isArray(val) ? \"array\" : typeof val\n          }\\`.`\n        );\n      }\n      return null;\n    },\n    defaultIndex: PropTypes.number,\n  };\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * TabList\n *\n * The parent component of the tabs.\n *\n * @see Docs https://reacttraining.com/reach-ui/tabs#tablist\n */\nexport const TabList = forwardRefWithAs<TabListProps, \"div\">(function TabList(\n  { children, as: Comp = \"div\", onKeyDown, ...props },\n  forwardedRef\n) {\n  const {\n    isControlled,\n    onSelectTab,\n    onFocusPanel,\n    setSelectedIndex,\n    selectedIndex,\n  } = useTabsContext();\n\n  let { descendants } = useContext(TabsDescendantsContext);\n  let ownRef = useRef<HTMLElement | null>(null);\n  let ref = useForkedRef(forwardedRef, ownRef);\n  let isRTL = useRef(false);\n\n  useEffect(() => {\n    if (\n      ownRef.current &&\n      ((ownRef.current.ownerDocument &&\n        ownRef.current.ownerDocument.dir === \"rtl\") ||\n        getElementComputedStyle(ownRef.current, \"direction\") === \"rtl\")\n    ) {\n      isRTL.current = true;\n    }\n  }, []);\n\n  let handleKeyDown = wrapEvent(\n    function(event: React.KeyboardEvent) {\n      if (event.key === \"ArrowDown\") {\n        event.preventDefault();\n        onFocusPanel();\n      }\n    },\n    useDescendantKeyDown(TabsDescendantsContext, {\n      currentIndex: selectedIndex,\n      orientation: \"horizontal\",\n      rotate: true,\n      callback: onSelectTab,\n      filter: tab => !tab.disabled,\n      rtl: isRTL.current,\n    })\n  );\n\n  useIsomorphicLayoutEffect(() => {\n    /*\n     * In the event an uncontrolled component's selected index is disabled,\n     * (this should only happen if the first tab is disabled and no default\n     * index is set), we need to override the selection to the next selectable\n     * index value.\n     */\n    if (\n      !isControlled &&\n      boolOrBoolString(descendants[selectedIndex]?.disabled)\n    ) {\n      let next = descendants.find(tab => !tab.disabled);\n      if (next) {\n        setSelectedIndex(next.index);\n      }\n    }\n  }, [descendants, isControlled, selectedIndex, setSelectedIndex]);\n\n  return (\n    <Comp\n      // If the `tablist` element is vertically oriented, it has the property\n      // `aria-orientation` set to `\"vertical\"`. The default value of\n      // `aria-orientation` for a tablist element is `\"horizontal\"`.\n      // https://www.w3.org/TR/wai-aria-practices-1.2/#tabpanel\n      // aria-orientation={vertical ? \"vertical\" : undefined}\n\n      // The element that serves as the container for the set of tabs has role\n      // `tablist`\n      // https://www.w3.org/TR/wai-aria-practices-1.2/#tabpanel\n      role=\"tablist\"\n      {...props}\n      data-reach-tab-list=\"\"\n      ref={ref}\n      onKeyDown={wrapEvent(onKeyDown, handleKeyDown)}\n    >\n      {Children.map(children, (child, index) => {\n        /*\n         * TODO: Since refactoring to use context rather than depending on\n         * parent/child relationships, we need to update our recommendations for\n         * animations that break when we don't forward the `isSelected` prop\n         * to our tabs. We will remove this in 1.0 and update our docs\n         * accordingly.\n         */\n        return cloneValidElement(child, {\n          isSelected: index === selectedIndex,\n        });\n      })}\n    </Comp>\n  );\n});\n\n/**\n * @see Docs https://reacttraining.com/reach-ui/tabs#tablist-props\n */\nexport type TabListProps = {\n  /**\n   * `TabList` expects multiple `Tab` elements as children.\n   *\n   * `TabPanels` expects multiple `TabPanel` elements as children.\n   *\n   * @see Docs https://reacttraining.com/reach-ui/tabs#tablist-children\n   */\n  children?: React.ReactNode;\n};\n\nif (__DEV__) {\n  TabList.displayName = \"TabList\";\n  TabList.propTypes = {\n    as: PropTypes.any,\n    children: PropTypes.node,\n  };\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Tab\n *\n * The interactive element that changes the selected panel.\n *\n * @see Docs https://reacttraining.com/reach-ui/tabs#tab\n */\nexport const Tab = forwardRefWithAs<\n  // TODO: Remove this when cloneElement is removed\n  TabProps & { isSelected?: boolean },\n  \"button\"\n>(function Tab(\n  { children, isSelected: _, as: Comp = \"button\", disabled, ...props },\n  forwardedRef\n) {\n  const {\n    id: tabsId,\n    onSelectTab,\n    selectedIndex,\n    userInteractedRef,\n  } = useTabsContext();\n  const ownRef = useRef<HTMLElement | null>(null);\n  const ref = useForkedRef(forwardedRef, ownRef);\n  const index = useDescendant({\n    element: ownRef.current!,\n    context: TabsDescendantsContext,\n    disabled: !!disabled,\n  });\n\n  const isSelected = index === selectedIndex;\n\n  function onSelect() {\n    onSelectTab(index);\n  }\n\n  useUpdateEffect(() => {\n    if (isSelected && ownRef.current && userInteractedRef.current) {\n      userInteractedRef.current = false;\n      ownRef.current.focus();\n    }\n  }, [isSelected]);\n\n  return (\n    <Comp\n      // Each element with role `tab` has the property `aria-controls` referring\n      // to its associated `tabpanel` element.\n      // https://www.w3.org/TR/wai-aria-practices-1.2/#tabpanel\n      aria-controls={makeId(tabsId, \"panel\", index)}\n      aria-disabled={disabled}\n      // The active tab element has the state `aria-selected` set to `true` and\n      // all other tab elements have it set to `false`.\n      // https://www.w3.org/TR/wai-aria-practices-1.2/#tabpanel\n      aria-selected={isSelected}\n      // Each element that serves as a tab has role `tab` and is contained\n      // within the element with role `tablist`.\n      // https://www.w3.org/TR/wai-aria-practices-1.2/#tabpanel\n      role=\"tab\"\n      tabIndex={isSelected ? 0 : -1}\n      {...props}\n      ref={ref}\n      data-reach-tab=\"\"\n      data-selected={isSelected ? \"\" : undefined}\n      disabled={disabled}\n      id={makeId(tabsId, \"tab\", index)}\n      onClick={onSelect}\n    >\n      {children}\n    </Comp>\n  );\n});\n\n/**\n * @see Docs https://reacttraining.com/reach-ui/tabs#tab-props\n */\nexport type TabProps = {\n  disabled?: boolean;\n} & TabPanelProps;\n\nif (__DEV__) {\n  Tab.displayName = \"Tab\";\n  Tab.propTypes = {\n    children: PropTypes.node,\n    disabled: PropTypes.bool,\n  };\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * TabPanels\n *\n * The parent component of the panels.\n *\n * @see Docs https://reacttraining.com/reach-ui/tabs#tabpanels\n */\nexport const TabPanels = forwardRefWithAs<TabPanelsProps, \"div\">(\n  function TabPanels({ children, as: Comp = \"div\", ...props }, forwardedRef) {\n    let [tabPanels, setTabPanels] = useDescendants<HTMLElement>();\n    return (\n      <DescendantProvider\n        context={TabPanelDescendantsContext}\n        items={tabPanels}\n        set={setTabPanels}\n      >\n        <Comp {...props} ref={forwardedRef} data-reach-tab-panels=\"\">\n          {children}\n        </Comp>\n      </DescendantProvider>\n    );\n  }\n);\n\n/**\n * @see Docs https://reacttraining.com/reach-ui/tabs#tabpanels-props\n */\nexport type TabPanelsProps = TabListProps & {};\n\nif (__DEV__) {\n  TabPanels.displayName = \"TabPanels\";\n  TabPanels.propTypes = {\n    as: PropTypes.any,\n    children: PropTypes.node,\n  };\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * TabPanel\n *\n * The panel that displays when it's corresponding tab is active.\n *\n * @see Docs https://reacttraining.com/reach-ui/tabs#tabpanel\n */\nexport const TabPanel = forwardRefWithAs<TabPanelProps, \"div\">(\n  function TabPanel(\n    { children, \"aria-label\": ariaLabel, as: Comp = \"div\", ...props },\n    forwardedRef\n  ) {\n    let { selectedPanelRef, selectedIndex, id: tabsId } = useTabsContext();\n    let ownRef = useRef<HTMLElement | null>(null);\n\n    let index = useDescendant({\n      element: ownRef.current!,\n      context: TabPanelDescendantsContext,\n    });\n    let isSelected = index === selectedIndex;\n\n    let id = makeId(tabsId, \"panel\", index);\n\n    let ref = useForkedRef(\n      forwardedRef,\n      ownRef,\n      isSelected ? selectedPanelRef : null\n    );\n\n    return (\n      <Comp\n        // Each element with role `tabpanel` has the property `aria-labelledby`\n        // referring to its associated tab element.\n        aria-labelledby={makeId(tabsId, \"tab\", index)}\n        hidden={!isSelected}\n        // Each element that contains the content panel for a tab has role\n        // `tabpanel`.\n        // https://www.w3.org/TR/wai-aria-practices-1.2/#tabpanel\n        role=\"tabpanel\"\n        tabIndex={isSelected ? 0 : -1}\n        {...props}\n        ref={ref}\n        data-reach-tab-panel=\"\"\n        id={id}\n      >\n        {children}\n      </Comp>\n    );\n  }\n);\n\n/**\n * @see Docs https://reacttraining.com/reach-ui/tabs#tabpanel-props\n */\nexport type TabPanelProps = {\n  /**\n   * `TabPanel` can receive any type of children.\n   *\n   * @see Docs https://reacttraining.com/reach-ui/tabs#tabpanel-children\n   */\n  children?: React.ReactNode;\n};\n\nif (__DEV__) {\n  TabPanel.displayName = \"TabPanel\";\n  TabPanel.propTypes = {\n    as: PropTypes.any,\n    children: PropTypes.node,\n  };\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// Types\n\ntype TabDescendantProps = {\n  disabled: boolean;\n};\n"],"names":["TabsDescendantsContext","createDescendantContext","TabPanelDescendantsContext","TabsContext","createNamedContext","useTabsContext","useContext","Tabs","forwardRefWithAs","ref","as","Comp","children","defaultIndex","index","controlledIndex","undefined","onChange","readOnly","props","isControlled","useRef","useEffect","warning","current","_id","useId","id","makeId","userInteractedRef","selectedPanelRef","useState","selectedIndex","setSelectedIndex","useDescendants","tabs","setTabs","context","useMemo","noop","onFocusPanel","focus","onSelectTab","checkStyles","React","DescendantProvider","items","set","Provider","value","displayName","propTypes","PropTypes","node","isRequired","func","name","compName","location","propName","val","Error","isNumber","Array","isArray","number","TabList","forwardedRef","onKeyDown","descendants","ownRef","useForkedRef","isRTL","ownerDocument","dir","getElementComputedStyle","handleKeyDown","wrapEvent","event","key","preventDefault","useDescendantKeyDown","currentIndex","orientation","rotate","callback","filter","tab","disabled","rtl","useIsomorphicLayoutEffect","boolOrBoolString","next","find","role","Children","map","child","cloneValidElement","isSelected","any","Tab","_","tabsId","useDescendant","element","onSelect","useUpdateEffect","tabIndex","onClick","bool","TabPanels","tabPanels","setTabPanels","TabPanel","ariaLabel","hidden"],"mappings":"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"}