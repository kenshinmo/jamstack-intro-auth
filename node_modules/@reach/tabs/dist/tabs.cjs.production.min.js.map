{"version":3,"file":"tabs.cjs.production.min.js","sources":["../src/index.tsx"],"sourcesContent":["/**\n * Welcome to @reach/tabs!\n *\n * An accessible tabs component.\n *\n * The `Tab` and `TabPanel` elements are associated by their order in the tree.\n * None of the components are empty wrappers, each is associated with a real DOM\n * element in the document, giving you maximum control over styling and composition.\n *\n * You can render any other elements you want inside of `Tabs`, but `TabList`\n * should only render `Tab` elements, and `TabPanels` should only render\n * `TabPanel` elements.\n *\n * TODO: Consider manual tab activation\n * https://www.w3.org/TR/wai-aria-practices-1.2/examples/tabs/tabs-2/tabs.html\n *\n *\n * TODO: Consider `orientation` prop to account for keyboard behavior\n *       - horizontal-top\n *       - horizontal-bottm\n *       - vertical-left\n *       - vertical-right\n *\n * @see Docs     https://reacttraining.com/reach-ui/tabs\n * @see Source   https://github.com/reach/reach-ui/tree/master/packages/tabs\n * @see WAI-ARIA https://www.w3.org/TR/wai-aria-practices-1.2/#tabpanel\n */\n\nimport React, {\n  useContext,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n  Children,\n} from \"react\";\nimport PropTypes from \"prop-types\";\nimport warning from \"warning\";\nimport {\n  createDescendantContext,\n  DescendantProvider,\n  useDescendant,\n  useDescendantKeyDown,\n  useDescendants,\n} from \"@reach/descendants\";\nimport {\n  boolOrBoolString,\n  checkStyles,\n  cloneValidElement,\n  createNamedContext,\n  forwardRefWithAs,\n  getElementComputedStyle,\n  isNumber,\n  makeId,\n  noop,\n  useForkedRef,\n  useIsomorphicLayoutEffect,\n  useUpdateEffect,\n  wrapEvent,\n} from \"@reach/utils\";\nimport { useId } from \"@reach/auto-id\";\n\ninterface ITabsContext {\n  id: string;\n  isControlled: boolean;\n  onFocusPanel: () => void;\n  onSelectTab: (index: number) => void;\n  selectedIndex: number;\n  selectedPanelRef: React.MutableRefObject<HTMLElement | null>;\n  setSelectedIndex: React.Dispatch<React.SetStateAction<number>>;\n  userInteractedRef: React.MutableRefObject<boolean>;\n}\n\nconst TabsDescendantsContext = createDescendantContext<\n  HTMLElement,\n  TabDescendantProps\n>(\"TabsDescendantsContext\");\n\nconst TabPanelDescendantsContext = createDescendantContext<HTMLElement>(\n  \"TabPanelDescendantsContext\"\n);\nconst TabsContext = createNamedContext(\"TabsContext\", {} as ITabsContext);\nconst useTabsContext = () => useContext(TabsContext);\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Tabs\n *\n * The parent component of the tab interface.\n *\n * @see Docs https://reacttraining.com/reach-ui/tabs#tabs\n */\nexport const Tabs = forwardRefWithAs<TabsProps, \"div\">(function Tabs(\n  {\n    as: Comp = \"div\",\n    children,\n    defaultIndex,\n    index: controlledIndex = undefined,\n    onChange,\n    readOnly = false,\n    ...props\n  },\n  ref\n) {\n  let isControlled = useRef(controlledIndex != null);\n  useEffect(() => {\n    if (__DEV__) {\n      warning(\n        !(isControlled.current && controlledIndex == null),\n        \"Tabs is changing from controlled to uncontrolled. Tabs should not switch from controlled to uncontrolled (or vice versa). Decide between using a controlled or uncontrolled Tabs for the lifetime of the component. Check the `index` prop being passed in.\"\n      );\n      warning(\n        !(!isControlled.current && controlledIndex != null),\n        \"Tabs is changing from uncontrolled to controlled. Tabs should not switch from uncontrolled to controlled (or vice versa). Decide between using a controlled or uncontrolled Tabs for the lifetime of the component. Check the `index` prop being passed in.\"\n      );\n    }\n  }, [controlledIndex]);\n\n  let _id = useId(props.id);\n  let id = props.id ?? makeId(\"tabs\", _id);\n\n  /*\n   * We only manage focus if the user caused the update vs. a new controlled\n   * index coming in.\n   */\n  let userInteractedRef = useRef(false);\n\n  let selectedPanelRef = useRef<HTMLElement | null>(null);\n  let [selectedIndex, setSelectedIndex] = useState(defaultIndex || 0);\n  let [tabs, setTabs] = useDescendants<HTMLElement, TabDescendantProps>();\n\n  const context: ITabsContext = useMemo(() => {\n    return {\n      isControlled: isControlled.current,\n      selectedIndex: isControlled.current\n        ? (controlledIndex as number)\n        : selectedIndex,\n      id,\n      userInteractedRef,\n      selectedPanelRef,\n      setSelectedIndex: isControlled.current ? noop : setSelectedIndex,\n      onFocusPanel: () => {\n        selectedPanelRef.current?.focus();\n      },\n      onSelectTab: readOnly\n        ? noop\n        : (index: number) => {\n            userInteractedRef.current = true;\n            onChange && onChange(index);\n            if (!isControlled.current) {\n              setSelectedIndex(index);\n            }\n          },\n    };\n  }, [controlledIndex, id, onChange, readOnly, selectedIndex]);\n\n  useEffect(() => checkStyles(\"tabs\"), []);\n\n  return (\n    <DescendantProvider\n      context={TabsDescendantsContext}\n      items={tabs}\n      set={setTabs}\n    >\n      <TabsContext.Provider value={context}>\n        <Comp {...props} ref={ref} data-reach-tabs=\"\" id={props.id}>\n          {children}\n        </Comp>\n      </TabsContext.Provider>\n    </DescendantProvider>\n  );\n});\n\n/**\n * @see Docs https://reacttraining.com/reach-ui/tabs#tabs-props\n */\nexport type TabsProps = {\n  /**\n   * Tabs expects `<TabList>` and `<TabPanels>` as children. The order doesn't\n   * matter, you can have tabs on the top or the bottom. In fact, you could have\n   * tabs on both the bottom and the top at the same time. You can have random\n   * elements inside as well.\n   *\n   * @see Docs https://reacttraining.com/reach-ui/tabs#tabs-props\n   */\n  children: React.ReactNode;\n  /**\n   * Like form inputs, a tab's state can be controlled by the owner. Make sure\n   * to include an `onChange` as well, or else the tabs will not be interactive.\n   *\n   * @see Docs https://reacttraining.com/reach-ui/tabs#tabs-props\n   */\n  index?: number;\n  /**\n   * @see Docs https://reacttraining.com/reach-ui/tabs#tabs-props\n   */\n  readOnly?: boolean;\n  /**\n   * Starts the tabs at a specific index.\n   *\n   * @see Docs https://reacttraining.com/reach-ui/tabs#tabs-props\n   */\n  defaultIndex?: number;\n  /**\n   * Calls back with the tab index whenever the user changes tabs, allowing your\n   * app to synchronize with it.\n   *\n   * @see Docs https://reacttraining.com/reach-ui/tabs#tabs-props\n   */\n  onChange?: (index: number) => void;\n};\n\nif (__DEV__) {\n  Tabs.displayName = \"Tabs\";\n  Tabs.propTypes = {\n    children: PropTypes.node.isRequired,\n    onChange: PropTypes.func,\n    index: (props, name, compName, location, propName) => {\n      let val = props[name];\n      if (\n        props.index > -1 &&\n        props.onChange == null &&\n        props.readOnly !== true\n      ) {\n        return new Error(\n          \"You provided a value prop to `\" +\n            compName +\n            \"` without an `onChange` handler. This will render a read-only tabs element. If the tabs should be mutable use `defaultIndex`. Otherwise, set `onChange`.\"\n        );\n      } else if (props[name] != null && !isNumber(props[name])) {\n        return new Error(\n          `Invalid prop \\`${propName}\\` supplied to \\`${compName}\\`. Expected \\`number\\`, received \\`${\n            Array.isArray(val) ? \"array\" : typeof val\n          }\\`.`\n        );\n      }\n      return null;\n    },\n    defaultIndex: PropTypes.number,\n  };\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * TabList\n *\n * The parent component of the tabs.\n *\n * @see Docs https://reacttraining.com/reach-ui/tabs#tablist\n */\nexport const TabList = forwardRefWithAs<TabListProps, \"div\">(function TabList(\n  { children, as: Comp = \"div\", onKeyDown, ...props },\n  forwardedRef\n) {\n  const {\n    isControlled,\n    onSelectTab,\n    onFocusPanel,\n    setSelectedIndex,\n    selectedIndex,\n  } = useTabsContext();\n\n  let { descendants } = useContext(TabsDescendantsContext);\n  let ownRef = useRef<HTMLElement | null>(null);\n  let ref = useForkedRef(forwardedRef, ownRef);\n  let isRTL = useRef(false);\n\n  useEffect(() => {\n    if (\n      ownRef.current &&\n      ((ownRef.current.ownerDocument &&\n        ownRef.current.ownerDocument.dir === \"rtl\") ||\n        getElementComputedStyle(ownRef.current, \"direction\") === \"rtl\")\n    ) {\n      isRTL.current = true;\n    }\n  }, []);\n\n  let handleKeyDown = wrapEvent(\n    function(event: React.KeyboardEvent) {\n      if (event.key === \"ArrowDown\") {\n        event.preventDefault();\n        onFocusPanel();\n      }\n    },\n    useDescendantKeyDown(TabsDescendantsContext, {\n      currentIndex: selectedIndex,\n      orientation: \"horizontal\",\n      rotate: true,\n      callback: onSelectTab,\n      filter: tab => !tab.disabled,\n      rtl: isRTL.current,\n    })\n  );\n\n  useIsomorphicLayoutEffect(() => {\n    /*\n     * In the event an uncontrolled component's selected index is disabled,\n     * (this should only happen if the first tab is disabled and no default\n     * index is set), we need to override the selection to the next selectable\n     * index value.\n     */\n    if (\n      !isControlled &&\n      boolOrBoolString(descendants[selectedIndex]?.disabled)\n    ) {\n      let next = descendants.find(tab => !tab.disabled);\n      if (next) {\n        setSelectedIndex(next.index);\n      }\n    }\n  }, [descendants, isControlled, selectedIndex, setSelectedIndex]);\n\n  return (\n    <Comp\n      // If the `tablist` element is vertically oriented, it has the property\n      // `aria-orientation` set to `\"vertical\"`. The default value of\n      // `aria-orientation` for a tablist element is `\"horizontal\"`.\n      // https://www.w3.org/TR/wai-aria-practices-1.2/#tabpanel\n      // aria-orientation={vertical ? \"vertical\" : undefined}\n\n      // The element that serves as the container for the set of tabs has role\n      // `tablist`\n      // https://www.w3.org/TR/wai-aria-practices-1.2/#tabpanel\n      role=\"tablist\"\n      {...props}\n      data-reach-tab-list=\"\"\n      ref={ref}\n      onKeyDown={wrapEvent(onKeyDown, handleKeyDown)}\n    >\n      {Children.map(children, (child, index) => {\n        /*\n         * TODO: Since refactoring to use context rather than depending on\n         * parent/child relationships, we need to update our recommendations for\n         * animations that break when we don't forward the `isSelected` prop\n         * to our tabs. We will remove this in 1.0 and update our docs\n         * accordingly.\n         */\n        return cloneValidElement(child, {\n          isSelected: index === selectedIndex,\n        });\n      })}\n    </Comp>\n  );\n});\n\n/**\n * @see Docs https://reacttraining.com/reach-ui/tabs#tablist-props\n */\nexport type TabListProps = {\n  /**\n   * `TabList` expects multiple `Tab` elements as children.\n   *\n   * `TabPanels` expects multiple `TabPanel` elements as children.\n   *\n   * @see Docs https://reacttraining.com/reach-ui/tabs#tablist-children\n   */\n  children?: React.ReactNode;\n};\n\nif (__DEV__) {\n  TabList.displayName = \"TabList\";\n  TabList.propTypes = {\n    as: PropTypes.any,\n    children: PropTypes.node,\n  };\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Tab\n *\n * The interactive element that changes the selected panel.\n *\n * @see Docs https://reacttraining.com/reach-ui/tabs#tab\n */\nexport const Tab = forwardRefWithAs<\n  // TODO: Remove this when cloneElement is removed\n  TabProps & { isSelected?: boolean },\n  \"button\"\n>(function Tab(\n  { children, isSelected: _, as: Comp = \"button\", disabled, ...props },\n  forwardedRef\n) {\n  const {\n    id: tabsId,\n    onSelectTab,\n    selectedIndex,\n    userInteractedRef,\n  } = useTabsContext();\n  const ownRef = useRef<HTMLElement | null>(null);\n  const ref = useForkedRef(forwardedRef, ownRef);\n  const index = useDescendant({\n    element: ownRef.current!,\n    context: TabsDescendantsContext,\n    disabled: !!disabled,\n  });\n\n  const isSelected = index === selectedIndex;\n\n  function onSelect() {\n    onSelectTab(index);\n  }\n\n  useUpdateEffect(() => {\n    if (isSelected && ownRef.current && userInteractedRef.current) {\n      userInteractedRef.current = false;\n      ownRef.current.focus();\n    }\n  }, [isSelected]);\n\n  return (\n    <Comp\n      // Each element with role `tab` has the property `aria-controls` referring\n      // to its associated `tabpanel` element.\n      // https://www.w3.org/TR/wai-aria-practices-1.2/#tabpanel\n      aria-controls={makeId(tabsId, \"panel\", index)}\n      aria-disabled={disabled}\n      // The active tab element has the state `aria-selected` set to `true` and\n      // all other tab elements have it set to `false`.\n      // https://www.w3.org/TR/wai-aria-practices-1.2/#tabpanel\n      aria-selected={isSelected}\n      // Each element that serves as a tab has role `tab` and is contained\n      // within the element with role `tablist`.\n      // https://www.w3.org/TR/wai-aria-practices-1.2/#tabpanel\n      role=\"tab\"\n      tabIndex={isSelected ? 0 : -1}\n      {...props}\n      ref={ref}\n      data-reach-tab=\"\"\n      data-selected={isSelected ? \"\" : undefined}\n      disabled={disabled}\n      id={makeId(tabsId, \"tab\", index)}\n      onClick={onSelect}\n    >\n      {children}\n    </Comp>\n  );\n});\n\n/**\n * @see Docs https://reacttraining.com/reach-ui/tabs#tab-props\n */\nexport type TabProps = {\n  disabled?: boolean;\n} & TabPanelProps;\n\nif (__DEV__) {\n  Tab.displayName = \"Tab\";\n  Tab.propTypes = {\n    children: PropTypes.node,\n    disabled: PropTypes.bool,\n  };\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * TabPanels\n *\n * The parent component of the panels.\n *\n * @see Docs https://reacttraining.com/reach-ui/tabs#tabpanels\n */\nexport const TabPanels = forwardRefWithAs<TabPanelsProps, \"div\">(\n  function TabPanels({ children, as: Comp = \"div\", ...props }, forwardedRef) {\n    let [tabPanels, setTabPanels] = useDescendants<HTMLElement>();\n    return (\n      <DescendantProvider\n        context={TabPanelDescendantsContext}\n        items={tabPanels}\n        set={setTabPanels}\n      >\n        <Comp {...props} ref={forwardedRef} data-reach-tab-panels=\"\">\n          {children}\n        </Comp>\n      </DescendantProvider>\n    );\n  }\n);\n\n/**\n * @see Docs https://reacttraining.com/reach-ui/tabs#tabpanels-props\n */\nexport type TabPanelsProps = TabListProps & {};\n\nif (__DEV__) {\n  TabPanels.displayName = \"TabPanels\";\n  TabPanels.propTypes = {\n    as: PropTypes.any,\n    children: PropTypes.node,\n  };\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * TabPanel\n *\n * The panel that displays when it's corresponding tab is active.\n *\n * @see Docs https://reacttraining.com/reach-ui/tabs#tabpanel\n */\nexport const TabPanel = forwardRefWithAs<TabPanelProps, \"div\">(\n  function TabPanel(\n    { children, \"aria-label\": ariaLabel, as: Comp = \"div\", ...props },\n    forwardedRef\n  ) {\n    let { selectedPanelRef, selectedIndex, id: tabsId } = useTabsContext();\n    let ownRef = useRef<HTMLElement | null>(null);\n\n    let index = useDescendant({\n      element: ownRef.current!,\n      context: TabPanelDescendantsContext,\n    });\n    let isSelected = index === selectedIndex;\n\n    let id = makeId(tabsId, \"panel\", index);\n\n    let ref = useForkedRef(\n      forwardedRef,\n      ownRef,\n      isSelected ? selectedPanelRef : null\n    );\n\n    return (\n      <Comp\n        // Each element with role `tabpanel` has the property `aria-labelledby`\n        // referring to its associated tab element.\n        aria-labelledby={makeId(tabsId, \"tab\", index)}\n        hidden={!isSelected}\n        // Each element that contains the content panel for a tab has role\n        // `tabpanel`.\n        // https://www.w3.org/TR/wai-aria-practices-1.2/#tabpanel\n        role=\"tabpanel\"\n        tabIndex={isSelected ? 0 : -1}\n        {...props}\n        ref={ref}\n        data-reach-tab-panel=\"\"\n        id={id}\n      >\n        {children}\n      </Comp>\n    );\n  }\n);\n\n/**\n * @see Docs https://reacttraining.com/reach-ui/tabs#tabpanel-props\n */\nexport type TabPanelProps = {\n  /**\n   * `TabPanel` can receive any type of children.\n   *\n   * @see Docs https://reacttraining.com/reach-ui/tabs#tabpanel-children\n   */\n  children?: React.ReactNode;\n};\n\nif (__DEV__) {\n  TabPanel.displayName = \"TabPanel\";\n  TabPanel.propTypes = {\n    as: PropTypes.any,\n    children: PropTypes.node,\n  };\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// Types\n\ntype TabDescendantProps = {\n  disabled: boolean;\n};\n"],"names":["TabsDescendantsContext","createDescendantContext","TabPanelDescendantsContext","TabsContext","createNamedContext","useTabsContext","useContext","Tabs","forwardRefWithAs","ref","as","Comp","children","defaultIndex","index","controlledIndex","undefined","onChange","readOnly","props","isControlled","useRef","useEffect","_id","useId","id","makeId","userInteractedRef","selectedPanelRef","useState","selectedIndex","setSelectedIndex","useDescendants","tabs","setTabs","context","useMemo","current","noop","onFocusPanel","focus","onSelectTab","checkStyles","React","DescendantProvider","items","set","Provider","value","TabList","forwardedRef","onKeyDown","descendants","ownRef","useForkedRef","isRTL","ownerDocument","dir","getElementComputedStyle","handleKeyDown","wrapEvent","event","key","preventDefault","useDescendantKeyDown","currentIndex","orientation","rotate","callback","filter","tab","disabled","rtl","useIsomorphicLayoutEffect","boolOrBoolString","_descendants$selected","next","find","role","Children","map","child","cloneValidElement","isSelected","Tab","tabsId","useDescendant","element","useUpdateEffect","tabIndex","onClick","TabPanels","TabPanel","hidden"],"mappings":"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"}